<!doctype html>
<html>
  <head>
      <meta charset="utf-8">
      <meta http-equiv="x-ua-compatible" content="ie=edge">
      <title>The Actual Cost of the Thrifty Food Plan</title>
      <meta name="viewport" content="width=device-width, initial-scale=1">
  </head>
  <body>
    <img src="map.png">

    <script src="underscore-min.js"></script>
    <script src="d3.min.js"></script>
    <script src="queue.v1.min.js"></script>
    <script>
      (function() {
        var G_PER_LB = 453.592;

        // all marketgroups
        var marketgroups = ['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19',
                            '20','21','22','23','24','25','26','91','92','93','94','95','96','97','98','99'];

        // map simplified TFP to QFAHD food groups
        var foodgroups = {
          'Whole Fruit': [1,2],
          'Fruit Juice': [3],
          'Dark Green Vegetables': [4,5],
          'Orange Vegetables': [6,7],
          'All Potatoes': [8,9],
          'Other Vegetables': [10,11,12,13],
          'Beans & Legumes': [14,15],
          'Whole Grains': [16,17,18],
          'Refined Grains': [19,20,21,45,47,50],
          'Low-fat Milk, Yogurt': [22,24],
          'Whole Milk, Yogurt': [25,27],
          'Milk Dessert': [44],
          'Cheese': [23,26],
          'Beef, Pork, etc.': [28,29,30],
          'Poultry': [31,32],
          'Fish': [33,34],
          'Nuts': [35,36],
          'Eggs': [37],
          'Fats & Oils': [38,39],
          'Soft Drinks': [41,42,53,54],
          'Sweets': [40,46],
          'Frozen Entree': [48,51,52],
          'Soups': [49]
        };

        // simplified foodgroup -> year -> CPI
        var cpi = d3.map();

        // simplified foodgroup -> age range -> TFP suggested lbs/week (avg of sexes)
        var tfp = d3.map();

        // marketgroup # -> foodgroup # -> cost per 100g
        var qfahd;

        queue(1) // serial queue
          .defer(d3.csv, 'data/historical_cpi.csv', function(d) { // load CPI data
            cpi.set(d['item'], {
              '2008': parseFloat(d['2008']),
              '2009': parseFloat(d['2009']),
              '2010': parseFloat(d['2010']),
              '2011': parseFloat(d['2011']),
              '2012': parseFloat(d['2012']),
              '2013': parseFloat(d['2013']),
              '2014': parseFloat(d['2014'])
            });
          })
          .defer(d3.csv, 'data/tfp_children.csv', function(d) { // load TFP for children
            tfp.set(d['foodgroup'], {
              '1 year': parseFloat(d['1 year']),
              '2-3 years': parseFloat(d['2-3 years']),
              '4-5 years': parseFloat(d['4-5 years']),
              '6-8 years': parseFloat(d['6-8 years']),
              '9-11 years': parseFloat(d['9-11 years'])
            });
          })
          .defer(d3.csv, 'data/tfp_males.csv', function(d) { // load TFP for males
            var entry = tfp.get(d['foodgroup']);
            entry['12-13 years'] = parseFloat(d['12-13 years']);
            entry['14-18 years'] = parseFloat(d['14-18 years']);
            entry['19-50 years'] = parseFloat(d['19-50 years']);
            entry['51-70 years'] = parseFloat(d['51-70 years']);
            entry['71+ years'] = parseFloat(d['71+ years']);
          })
          .defer(d3.csv, 'data/tfp_females.csv', function(d) { // load TFP for females, average out
            var entry = tfp.get(d['foodgroup']);
            entry['12-13 years'] = (entry['12-13 years'] + parseFloat(d['12-13 years']))/2;
            entry['14-18 years'] = (entry['14-18 years'] + parseFloat(d['14-18 years']))/2;
            entry['19-50 years'] = (entry['19-50 years'] + parseFloat(d['19-50 years']))/2;
            entry['51-70 years'] = (entry['51-70 years'] + parseFloat(d['51-70 years']))/2;
            entry['71+ years'] = (entry['71+ years'] + parseFloat(d['71+ years']))/2;
          })
          .awaitAll(function(error, results) {
            d3.csv('data/qfahd_recent.csv', function(csv) { // load most recent QFAHD data
              qfahd = d3.nest()
                        .key(function(d) { return d.marketgroup; })
                        .rollup(function(values) {
                          return {
                            monthlyCost: function(age) { // calculate all the things
                              return _.reduce(foodgroups, function(memo, value, key) {
                                var relevantValues = values.filter(function(d) {
                                  return _.contains(value, parseInt(d.foodgroup));
                                });
                                var lbsPerWeek = tfp.get(key)[parseAge(age)];
                                var pricePerHectogram = d3.min(relevantValues, function(d) {
                                  var pctInflation = 1;
                                  for (var year = parseInt(d.year); year < 2015; year++) {
                                    pctInflation *= (1 + cpi.get(key)[year]/100); // adjusting for inflation
                                  }
                                  return parseFloat(d.price) * pctInflation;
                                });
                                return memo += pricePerHectogram / 100 * G_PER_LB * lbsPerWeek * 4; 
                              }, 0);
                            }
                          };
                        })
                        .map(csv);
              _.each(marketgroups, function(mg) {
                console.log(mg + ',' + qfahd[mg].monthlyCost(35));
              });
            });
          });

          // returns an age string
          function parseAge(age) {
            if (age < 2) {
              return '1 year';
            }
            else if (age >= 2 && age < 4) {
              return '2-3 years';
            }
            else if (age >= 4 && age < 6) {
              return '4-5 years';
            }
            else if (age >= 6 && age < 9) {
              return '6-8 years';
            }
            else if (age >= 9 && age < 12) {
              return '9-11 years';
            }
            else if (age >= 12 && age < 14) {
              return '12-13 years';
            }
            else if (age >= 14 && age < 19) {
              return '14-18 years';
            }
            else if (age >= 19 && age < 51) {
              return '19-50 years';
            }
            else if (age >= 51 && age < 71) {
              return '51-70 years';
            }
            else {
              return '71+ years';
            }
          };
      })();
    </script>
  </body>
</html>
